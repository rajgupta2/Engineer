Linux Commands
-------------------------------------
whoami : It will display currently logged in username

pwd : present working directory

date : To display current date

cal : To display calendar

touch : it is used to create empty file
		$ touch f1.txt

ls: To display files we will use 'ls' command
		$ ls

ls -a : It will display all files including hidden files (hidden files will start with .)

cat: To create a file with data we will use 'cat' command

		$ cat > hello.txt
		//write data
		press CTRL + d (to save and exit)

        $ cat hello.txt   (To display file data)

		$ cat >> hello.txt (To append data in the file)
		//write data
		press CTRL + d (to save and exit)

mkdir: To create directory
       $ mkdir dirname

rm: To remove the file
		$ rm filename

rmdir: To remove the empty directory
        $ rmdir dirname

       To delete non-empty directory we will use 'rm' command like below
		$ rm -r dirname

clear: To clear the console

history: To view the history

head command
-------------
-> head command is used to display file data from top (default 10 lines)

		$ head filename
		$ head -n 5 data.log  (first 5 lines data)
		~$ head -n 20 data.log (first 20 lines data)


tail command
-------------
-> tail command is used to display file data from bottom (default 10 lines)

		$ tail filename (last 10 lines data)
		$ tail -n 100 filename (last 100 lines data)

wc command
-----------
-> It is used to count no.of lines, no.of words and no.of characters in the file
          $ wc f1.txt
            2  8 45 f1.txt

cp command
---------
-> To copy the data from one file to another file
  	$ cp one.txt two.txt  ( or ) $ cat one.txt > two.txt
	$ cp f1.txt f2.txt f3.txt  (invalid syntax)

-> We can't copy morethan one file data using 'cp' command. To copy multiple files data we should go for 'cat' command
	$ cat f1.txt f2.txt > f3.txt

Rename the files or directories
--------------------------------
-> To rename files we will use 'mv' command
	$ mv f1.txt f1111.txt
	$ mv  dirname dirnewname
Note: We can use 'mv' command for renaming and moving files

Comparing files
---------------
-> To compare files we can use below commands
       $ cmp f1.txt f2.txt
       $ diff f1.txt f2.txt
-> cmp command will display only first difference in given 2 two files
-> diff command will display all the differences in the content


grep command
------------
-> 'grep' stands for global regular expression print.
-> 'grep' command will process the text line by line and prints any lines which matches given pattern.
Ex: I want to print all lines which contains 'NullPointerException'
	$ grep -i 'NullPointerException' *
Note: We can install grep using below command
	$ sudo yum install grep

//search for the lines which contains given word in the given filename 
    $ grep 'given_word' filename

//search for the lines which are having exception keyword in server.log file
    $ grep -i 'exception' server.log 

//search for the given text in present directory and in sub-directories also
    $ grep -R 'exception'

=> We can pass several options for 'grep' command

-c : This prints only the count of files that matches give pattern

-i : ignore case-sentitivty

-n : Display the matched lines and their line numbers

-l : Displays only file names that matches the pattern

-h : Displays matched lines without file names

-R : Displays matched lines with file names

Working with Text Editors in Linux
==================================
The default editor that comes with the UNIX operating system 
is called vi (visual editor). 
Using vi editor, we can edit an existing file or create a new file from scratch.
We can also use this editor to just read a text file.

Modes of Operation in vi editor 
+++++++++++++++++++++++++++++++++
There are three modes of operation in vi:

1) command mode =>To enter into Command Mode from any other mode, it requires pressing the [Esc] key.
2) insert mode =>To come in insert mode you simply type i.
3) escape mode (Last Line Mode)
      |
      |->Line Mode is invoked by typing a colon [:], while vi is in Command Mode. 
        The cursor will jump to the last line of the screen and vi will wait for a command. 
        This mode enables you to perform tasks such as saving files, executing commands.

Commands and their Description
---------------------------------
vi filename: Creates a new file if it already not exist, otherwise opens existing file.
vi -R filename : Opens an existing file in read only mode.
view filename : Opens an existing file in read only mode.


vi f1.txt
=> After making changes if we don't want to save those changes then execute :q!


Usecase
-------
-> We will use 'vi' editor to perform below activities
a) To edit config files of our application
b) To edit shell script files


Working with SED command
------------------------
SED command in UNIX stands for stream editor and it can perform lots of functions on file like searching, find and replace, insertion or deletion.
Though most common use of SED command in UNIX is for substitution or for find and replace. 
By using SED you can edit files even without opening them, which is much quicker way to find and replace something in file, than first opening that file in VI Editor and then changing it.
SED is a powerful text stream editor. Can do insertion, deletion, search and replace(substitution).
SED command in unix supports regular expression which allows it perform complex pattern matching.

Example:
--------
$ cat > myfile.txt
unix is great os. unix is opensource. unix is free os.
learn operating system.
unix linux which one you choose.
unix is easy to learn.unix is a multiuser os. Learn unix. unix is a powerful.


Replacing or substituting string : 
----------------------------------
Sed command is mostly used to replace the text in a file. The below simple sed command replaces the word “unix” with “linux” in the file
      $sed 's/unix/linux/' myfile.txt
By default, the sed command replaces the first occurrence of the pattern in each line and it won’t replace the second, third…occurrence in the line.

Replacing the nth occurrence of a pattern in a line : 
---------------------------------------------------
Use the /1, /2 etc flags to replace the first, second occurrence of a pattern in a line. The below command replaces the second occurrence of the word “unix” with “linux” in a line.
       $sed 's/unix/linux/2' geekfile.txt

Replacing all the occurrence of the pattern in a line : 
----------------------------------------------
The substitute flag /g (global replacement) specifies the sed command to replace all the occurrences of the string in the line.
       $ sed 's/unix/linux/g' myfile.txt

Deleting lines from a particular file 
-------------------------------------
SED command can also be used for deleting lines from a particular file. SED command is used for performing deletion operation without even opening the file

To Delete a particular line say n in this example
----------------------------------------------------
$ sed '5d' myfile.txt

Note: By default SED command changes will not store in file.

=> To make SED command changes to file permanently we will use '-i' optionn.
	$ sed -i 's/unix/linux/g' myfile.txt  

Note: With above command 'unix' keyword will be replaced with 'linux' keyword in the file permanently.

File permissions
================
To create a secure environment in Linux, you need to learn about user groups and permissions. For example, if you work in a company and you want the finance department to read a file but not make any modification to it, then you need to use permissions in Linux. It is a must for every programmer working with Linux nowadays.
Let’s start by talking about the ownership of Linux files.

User: the owner of the file (person who created the file).

Group: the group can contain multiple users. 
Therefore, all users in that group will have the same permissions. It makes things easier than assign permission for every user you want.

Other: any person has access to that file, that person has neither created the file, nor are they in any group which has access to that file.

=> Execute 'ls -l' command to file's permissions
We will work with this part “-rw-r–r–".

The characters mean:

‘r’ = read.
‘w’ = write.
‘x’ = execute.
‘-’ = no permission.

 U  G   O
-rw-r--r--

-: It represents file
rw: User
r: Group
r: Other

As we see above, the empty first part means that it is a file. If it were a directory then it will be the letter “d” instead.
The second part means that the user “Home” has read and write permissions but he does not have the execute one.
The group and others have only the read permission.


Let’s change the permissions using the chmod command.

chmod command
=====================================>
           => chmod o+w section.txt
                 This command will add the write permission for other users to my text file “section.txt”.
Now if you try to execute ls -l then you will see -rw-r--rw-

“o” refers to others, “g” for the group, “u” for the user, and “a” for all.

Now let’s add the execute permission to the user with:

      => chmod u+x section.txt
           The permissions will be -rwxr--rw-

If you want to remove the permission, you can use the same method but with “-” instead of “+”. 

=> chmod u-x section.txt

And the permissions now are: -rw-r--rw-

Also, you can use Symbolic Mode to modify permissions like the following:
Number	Permission
0	No permission
1	Execute
2	Write
3	Execute and Write
4	Read
5	Read and Execute
6	Read and Write
7	Read, Write and Execute

For example, let’s give every permission for all with:

=> chmod 777 section.txt

Then the permissions will be: -rwxrwxrwx.

Let’s remove the execute from the group and the write from other by:

=> chmod 765 section.txt
Working with 'find' and 'locate' commands
------------------------------------------

locate command
++++++++++++++++
The locate Command  will search for data in local db

$ sudo apt install mlocate

$ locate apache

$ locate -c apache

$ locate -c *.txt

$ locate -S (to see locate database)

Note: when we create new files it will take some time to update those files in mlocate db

find command
+++++++++++++
=> find command will search for the files in entire linux file system.
=> find command providing advanced searching technique
=> Using find command, we can search for the files based on name and type also.

2. Find Files Under Home Directory
# find /home -name f1.txt

7. Find Files With 777 Permissions
# find . -type f -perm 0777 -print

19. Find all Empty Files
# find /home -type f -empty



Working with User Accounts
==========================
Create a user
=> sudo adduser testuser

After creating a new user and setting a password to it, you can log in in two ways:
By the terminal: su - testuser


Delete a user
=============
=> sudo userdel testuser
If you try that command, you will notice that the user directory has not been deleted and you need to delete it by yourself.

You can use this automated command to do everything for you:
sudo deluser --remove-home testuser


User groups
============
A group is a collection of users. The primary purpose of the groups is to define a set of privileges like read, write, or execute permission for a given resource that can be shared among the users within the group.

=>To see all the groups you have
  cat /etc/group

=>Create a group
  sudo groupadd section

=>Add user to a group
  sudo usermod -aG section testuser

=>verify user's groups using command -> id username

=>Delete user from a group
    sudo gpasswd -d testuser section

=>Delete a group
    sudo groupdel section


man command
+++++++++++++++++
'man' command is like a help command. It is used to understand command syntax and options.
		$ man cat

ipconfig command
+++++++++++++++++
To see ip address  we will use 'ifconfig' command 
	$ ifconfig

Note : ifconfig is not installed then execute below command
	$ sudo apt install net-tools

'ping' command is used to check connectivity
	$ ping <ip>

'curl' command is used to get response from the server
	$ curl <url>

'wget' command is used to download resources from internet
	$ wget <url>